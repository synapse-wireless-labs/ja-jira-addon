<!DOCTYPE html>
<html>
<head>
    <meta name="ap-local-base-url" content="{{localBaseUrl}}">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="ap-local-base-url" content="{{localBaseUrl}}">

    <link rel="stylesheet" href="//aui-cdn.atlassian.com/aui-adg/5.6.11/css/aui.css" media="all">
    <link rel="stylesheet" href="{{furl '/css/addon.css'}}" type="text/css" />
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    <script src="//aui-cdn.atlassian.com/aui-adg/5.6.11/js/aui.js" type="text/javascript"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
    <script src="{{hostBaseUrl}}/atlassian-connect/all.js"></script>
</head>

<body>
<section id="content" role="main">
    <div class="aui-page-panel ac-content">
        <div class="aui-page-panel-inner">
            <section class="aui-page-panel-content">
                <div id="issues-in-project" class="aui-item">
                </div>
            </section>
        </div>
    </div>
</section>
<script type="text/underscore-template" id="issueTableRow">
    <tr>
        <td headers="key">
            <a class="issue-link" data-issue-key="<%=epic.key%>" href="{{hostBaseUrl}}/browse/<%=epic.key%>" target="_blank"><%=epic.key%></a>
        </td>
        <td headers="summary">
            <p><a class="issue-link" data-issue-key="<%=epic.key%>" href="{{hostBaseUrl}}/browse/<%=epic.key%>" target="_blank"><%=epic.fields.summary%></a></p>
        </td>
        <td headers="status">
            <span class="aui-lozenge aui-lozenge-subtle <%=epic.lozengeColorClass%>"><%=epic.fields.status.statusCategory.name%></span>
        </td>
        <td headers="unestimatedStories">
            <% if (epic.totalPoints > 0) { %>
                <a class="issue-link" data-issue-key="<%=epic.key%>" href="{{hostBaseUrl}}/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=%22Epic Link%22 = <%=epic.key%> and %22Story Points%22 is empty" target="_blank">
                    <%=epic.unestimatedStoryCount%> out of <%=epic.storyCount%> (<%=epic.percentUnestimatedStories%>%)</a>
                </a>
            <% } else { %>
                N/A
            <% } %>
        </td>
        <td style="min-width: 300px" headers="progress">
            <ul class="ag-progress">
                <li class="ag-todo" <% if (epic.totalPoints > 0) { %> style="width:<%=epic.percentTodo%>%" <% } else { %>" style="width:100%"<% } %> >
                    <a href="{{hostBaseUrl}}/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=statusCategory =%22To Do%22 AND %22Epic Link%22 = <%=epic.key%>" class="ag-status-info inlineToDoDialog" target="_blank">
                        <b><% if (epic.totalPoints > 0) { %> <%=epic.toDoPoints%> <% } else { %>None<% } %></b>
                    </a>
                </li>
                <li class="ag-inprogress <% if (epic.inProgressPoints==0){print(" hidden");}%>" style="width:<%=epic.percentInProgress%>%">
                    <a href="{{hostBaseUrl}}/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=statusCategory = %22In Progress%22 AND %22Epic Link%22 = <%=epic.key%>" class="ag-status-info inlineProgressDialog" target="_blank">
                        <b><%=epic.inProgressPoints%></b>
                    </a>
                </li>
                <li class="ag-done <% if (epic.donePoints==0){print(" hidden");}%>" style="width:<%=epic.percentComplete%>%">
                    <a href="{{hostBaseUrl}}/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=statusCategory = %22Done%22 AND %22Epic Link%22 = <%=epic.key%>" class="ag-status-info inlineProgressDialog" target="_blank">
                        <b><%=epic.donePoints%></b>
                    </a>
                </li>
            </ul>
        </td>
    </tr>
</script>
<script type="text/underscore-template" id="issuesTableTemplate">
    <table id='issuesTable' class='aui'>
        <thead>
            <th id="key">Key</th>
            <th id="summary">Summary</th>
            <th id="status">Status</th>
            <th id="unestimatedStories">Unestimated Stories</th>
            <th id="progress">Progress</th>
        </thead>
        <tbody></tbody>
    </table>
</script>
<script type="text/underscore-template" id="dashboardItemConfigTemplate">
    <form class='aui'>
        <div class='field-group'>
            <label for='itemTitle'>Title:<span class='aui-icon icon-required'>required</span></label>
            <input class='text medium-field' type='text' id='itemTitle' value='<%=itemTitle%>'/>
        </div>
        <div class='field-group'>
            <label for='selectedProject'>Project:<span class='aui-icon icon-required'>required</span></label>
            <select class='select' id='selectedProject'></select>
        </div>
        <div class='field-group'>
            <label for='selectedVersion'>Release:<span class='aui-icon icon-required'>required</span></label>
            <select class='select' id='selectedVersion'></select>
        </div>
        <div class='buttons-container'>
            <button type='submit' id='saveConfiguration' class='aui-button'>Save</button>
        </div>
    </form>
</script>
<script type="text/javascript">

    var IssueTableView = function () {
        return {
            setTitle: function (config) {
                if (config) {
                    AP.require(['jira'], function (jira) {
                        jira.setDashboardItemTitle(config.title);
                    });
                } else {
                    AP.require(['jira'], function (jira) {
                        jira.setDashboardItemTitle('Issues in project');
                    });
                }
            },
            template: function (context) {
                return _.template($('#issuesTableTemplate').html())(context);
            },
            render: function (configuration) {
                $('#issues-in-project').html(this.template());
                this.setTitle(configuration);

                new IssueSearchService(configuration.project, configuration.version)
                        .getEpics(function(epics){
                            var epicTable = $('#issuesTable tbody');
                            $.each(epics, function (i, $epic) {
                                epicTable.append(_.template($('#issueTableRow').html())({epic: $epic}));
                            });
                        })
                }
            }
    };

    var IssueSearchService = function (project, version) {
        return {
            getEpics: function(callback) {
                AP.require(['request'], function (request) {
                    var epics={};

                    var getEpicList = function(callback) {
                        var jql = encodeURIComponent('project = ' + project + ' AND fixVersion = "' + version + '" AND issuetype = Epic');

                        request({
                            url: '/rest/api/2/search?jql=' + jql,
                            success: function (response) {
                                var epicsJson = JSON.parse(response).issues;
                                callback(epicsJson);
                            }
                        });
                    };

                    var getCustomIds = function(callback) {
                        var story_points_id = '';
                        var epic_link_id = '';

                        request({
                            url: '/rest/api/2/field',
                            success: function (response) {
                                var fields = JSON.parse(response);
                                $.each(fields, function (i, field) {
                                    if (field.name == "Story Points") {
                                        story_points_id = field.id;
                                    } else if (field.name == "Epic Link") {
                                        epic_link_id = field.id;
                                    }
                                });

                                callback(story_points_id, epic_link_id);
                            }
                        });
                    };

                    getCustomIds(function (story_points_id, epic_link_id) {

                        var getIssuesFromEpics = function(callback) {
                            var keylist = [];
                            $.each(epics, function (i, epic) {
                                keylist.push(epic.key);
                            });
                            var jql = encodeURIComponent('project = ' + project + ' AND fixVersion = "' + version + '" AND "Epic Link" in (' + keylist.join(',') + ')');
                            var fields = encodeURIComponent([epic_link_id,story_points_id,'status','key'].join(','));

                            request({
                                url: '/rest/api/2/search?jql=' + jql + '&fields=' + fields + '&maxResults=500',
                                success: function (response) {
                                    var issues = JSON.parse(response).issues;
                                    callback(issues);
                                }
                            });
                        };

                        getEpicList(function (epicsJson) {
                            $.each(epicsJson, function (i, e) {
                                epics[e.key] = e;

                                e.lozengeColorClass = "";
                                switch (e.fields.status.statusCategory.name) {
                                    case "To Do":
                                        e.lozengeColorClass = "aui-lozenge-complete";
                                        break;
                                    case "In Progress":
                                        e.lozengeColorClass = "aui-lozenge-current";
                                        break;
                                    case "Done":
                                        e.lozengeColorClass = "aui-lozenge-success";
                                        break;
                                }

                                e.stories = [];
                                e.storyCount = 0;
                                e.estimatedStoryCount = 0;
                                e.unestimatedStoryCount = 0;
                                e.percentUnestimatedStories = 0;
                                e.totalPoints = 0;
                                e.toDoPoints = 0;
                                e.inProgressPoints = 0;
                                e.donePoints = 0;
                                e.percentTodo = 0;
                                e.percentInProgress = 0;
                                e.percentComplete = 0;

                            });

                            getIssuesFromEpics(function (issuesJson) {
                                $.each(issuesJson, function (i, issue) {
                                    epic = epics[issue.fields[epic_link_id]];
                                    epic.stories.push(issue.key);
                                    epic.storyCount += 1;

                                    story_points = issue.fields[story_points_id];
                                    if (story_points) {
                                        epic.estimatedStoryCount += 1;
                                        epic.totalPoints += story_points;

                                        switch (issue.fields.status.statusCategory.name) {
                                            case "To Do":
                                                epic.toDoPoints += story_points;
                                                break;
                                            case "In Progress":
                                                epic.inProgressPoints += story_points;
                                                break;
                                            case "Done":
                                                epic.donePoints += story_points;
                                                break;
                                        }
                                    }
                                });

                                $.each(epicsJson, function (i, epic) {
                                    epic.percentTodo = (epic.toDoPoints / epic.totalPoints) * 100;
                                    epic.percentInProgress = (epic.inProgressPoints / epic.totalPoints) * 100;
                                    epic.percentComplete = (epic.donePoints / epic.totalPoints) * 100;
                                    epic.unestimatedStoryCount = epic.storyCount - epic.estimatedStoryCount;
                                    epic.percentUnestimatedStories = (epic.unestimatedStoryCount / epic.storyCount) * 100;
                                });

                                callback(epics);
                            });
                        });
                    });
                });
            }
        }
    };

    var DashboardItemConfigurationView = function () {
        return {
            template: function (value) {
                return _.template($('#dashboardItemConfigTemplate').html())(value);
            },
            addProjects: function (config, addVersions) {
                AP.require(['request'], function (request) {
                    request({
                        url: '/rest/api/2/project',
                        success: function (response) {
                            var projects = JSON.parse(response);
                            var selectedProject = $('#selectedProject');
                            $.each(projects, function (index, project) {
                                var select = $('<option>', {value: project.id}).text(project.name);
                                if (config && config.project == project.id) {
                                    selectedProject.append(select.attr('selected', 'selected'));
                                }
                                selectedProject.append(select);
                            });
                            addVersions(config)
                        }
                    });
                });

            },
            addVersions: function (config) {
                var currentProject = $('#selectedProject').find(':selected').val();
                AP.require(['request'], function (request) {
                    request({
                        url: '/rest/api/2/project/' + currentProject,
                        success: function (response) {
                            var selectedVersion = $('#selectedVersion');
                            selectedVersion.empty();
                            var versions = JSON.parse(response).versions;
                            $.each(versions, function (index, version) {
                                var versionOption = $('<option>', {value: version.id}).text(version.name);
                                if (config && config.version == version.id) {
                                    selectedVersion.append(versionOption.attr('selected', 'selected'));
                                }
                                selectedVersion.append(versionOption);
                            });
                        }
                    })
                });
            },
            render: function (config) {
                if (config) {
                    $('#issues-in-project').html(this.template({itemTitle: config.title}));
                } else {
                    $('#issues-in-project').html(this.template({itemTitle: 'Issues for project'}));
                }
                this.addProjects(config, this.addVersions);

                $('#selectedProject').change(config, this.addVersions);
                $('#saveConfiguration').click(function (e) {
                    e.preventDefault();
                    var service = new DashboardItemConfigurationService();
                    var $title = $('#itemTitle').val();
                    var $project = $('#selectedProject').find(':selected').val();
                    var $version = $('#selectedVersion').find(':selected').val();
                    var configuration = {project: $project, title: $title, version: $version};
                    service.save(configuration, function () {
                        new IssueTableView().render(configuration);
                    });
                });
            }
        }
    };

    var DashboardItemConfigurationService = function () {
        return {
            getConfiguration: function (configuredCallback, errorCallback) {
                AP.require(['request'], function (request) {
                    request({
                        url: '/rest/api/2/dashboard/{{{dashboard}}}/items/{{{dashboardItem}}}/properties/itemkey',
                        success: function (response) {
                            configuredCallback(JSON.parse(response).value);
                        }
                    });
                });
            },
            isConfigured: function (configuredCallback, notConfiguredCallback) {
                var that = this;
                AP.require(['request'], function (request) {
                    request({
                        url: '/rest/api/2/dashboard/{{{dashboard}}}/items/{{{dashboardItem}}}/properties',
                        success: function (response) {
                            var arrayOfProperties = JSON.parse(response).keys;
                            var configured = _.find(arrayOfProperties, function (property) {
                                return "itemkey" == property.key;
                            });
                            if (configured) {
                                that.getConfiguration(configuredCallback)
                            } else {
                                notConfiguredCallback();
                            }
                        }
                    });
                });
            },
            save: function (configuration, successCallback) {
                AP.require(['request'], function (request) {
                    request({
                        url: '/rest/api/2/dashboard/{{{dashboard}}}/items/{{{dashboardItem}}}/properties/itemkey',
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(configuration),
                        success: successCallback
                    });
                });
            }
        }
    };

    var DashboardItemView = function () {
        return {
            render: function () {
                var service = new DashboardItemConfigurationService();
                service.isConfigured(function (config) {
                    new IssueTableView().render(config)
                }, function () {
                    new DashboardItemConfigurationView().render();
                });
            }
        }
    };

    AP.require(['jira'], function (jira) {
        jira.DashboardItem.onDashboardItemEdit(function () {
            new DashboardItemConfigurationService().getConfiguration(function (config) {
                new DashboardItemConfigurationView().render(config);
            });
        });
    });

    new DashboardItemView().render();

</script>

</body>
</html>